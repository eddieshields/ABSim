if (TARGET_BACKEND STREQUAL "CPU")
    include_directories(cpu)
    file(GLOB backend_sources "cpu/*cpp")
    add_library(Backend STATIC ${backend_sources})
elseif (TARGET_BACKEND STREQUAL "THREADS")
    find_package(Threads)
    if (Threads_Found)
        include_directories(cputhreads)
        file(GLOB backend_sources "cputhreads/*cpp")
        add_library(Backend STATIC ${backend_sources} ${CMAKE_THREAD_LIBS_INIT})
    else()
    message(STATUS "Threads not found, building for CPU instead")
        include_directories(cpu)
        file(GLOB backend_sources "cpu/*cpp")
        add_library(Backend STATIC ${backend_sources})
    endif()
elseif (TARGET_BACKEND STREQUAL "OPENMP")
    find_package(OpenMP)
    if (OpenMP_CXX_FOUND)
        include_directories(openmp)
        file(GLOB backend_sources "openmp/*cpp")
        add_library(Backend STATIC ${backend_sources} OpenMP::OpenMP_CXX)
    else()
    message(STATUS "OpenMP not found for CXX, trying with Threads instead.")
        find_package(Threads)
        if (Threads_Found)
            include_directories(cputhreads)
            file(GLOB backend_sources "cputhreads/*cpp")
            add_library(Backend STATIC ${backend_sources} ${CMAKE_THREAD_LIBS_INIT})
        else()
            include_directories(cpu)
            file(GLOB backend_sources "cpu/*cpp")
            add_library(Backend STATIC ${backend_sources})
        endif()
    endif()
elseif(TARGET_BACKEND STREQUAL "GPU")
    include_directories(gpu)
    file(GLOB backend_sources "gpu/*cpp")
    add_library(Backend STATIC ${backend_sources})
endif()